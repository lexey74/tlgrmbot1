import logging
import typing

from telegram import Update
from telegram.constants import ParseMode
from telegram.error import TelegramError
from telegram.ext import (Application, CallbackContext, CommandHandler,
                          MessageHandler, filters)

from config import CHATS_PATH, TELEGRAM_BOT_TOKEN

if typing.TYPE_CHECKING:
    from scheduler_service import ScheduleService

logger = logging.getLogger('app')


class TelegramService:
    bot_app: Application
    scheduler: 'ScheduleService' = None

    def __init__(self):
        self.bot_app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self._add_handlers(self.bot_app)

    def _add_handlers(self, app: Application):
        app.add_handler(CommandHandler('start', self._start_command))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_response))

    async def start(self):
        await self.bot_app.initialize()
        await self.bot_app.start()
        await self.bot_app.updater.start_polling()

    async def stop(self):
        await self.bot_app.stop()


    async def send_message(self, chat_id, text):
        try:
            logger.info(f'–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {text}')
            await self.bot_app.bot.send_message(chat_id=chat_id, text=text,
                                                parse_mode=ParseMode.MARKDOWN)
            logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
        except TelegramError as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}')

    async def _start_command(self, update: Update, _: CallbackContext):
        logger.info('–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞')
        chat_id = update.message.chat_id
        user_name = update.message.from_user.username
        logger.info(f'chat_id: {chat_id}, user_name: {user_name}')
        with open(CHATS_PATH / f'{user_name}.txt', 'a') as file:
            file.write(str(chat_id))
        logger.info('–°–æ—Ö—Ä–∞–Ω–µ–Ω chat_id –≤ —Ñ–∞–π–ª')
        try:
            logger.info(f'–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}')
            await update.message.reply_text('–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ Mobicult üéâ!\n\n–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –∫–æ–¥ –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ (–≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è) –µ–≥–æ –¥–æ–±–∞–≤—è—Ç –º–Ω–µ –≤ –±–∞–∑—É, —è –Ω–∞—á–Ω—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –≤–∞–∂–Ω—ã—Ö –≤–µ—â–∞—Ö üòâ', parse_mode=ParseMode.MARKDOWN)
            logger.info(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞! –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}')
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
        logger.info(f'Chat ID {chat_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω')

#        await self.scheduler.check_hours()

    async def handle_response(self, update: Update, _: CallbackContext):
        response = update.message.text.lower()
        chat_id = update.message.chat_id
        logger.info(f'–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {chat_id}: {response}')
        if '–¥–∞' in response or '–≤–µ—Ä–Ω–æ' in response:
            await self.send_message(chat_id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!\n\n –î–ª—è –Ω–∞—Å –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –≤ —Ç—Ä–µ–∫–µ—Ä–µ —Å–æ–¥–µ—Ä–∂–∞–ª–∏—Å—å —á–µ—Å—Ç–Ω—ã–µ —á–∞—Å—ã, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã.', parse_mode=ParseMode.MARKDOWN)
        elif '–Ω–µ—Ç' in response or '–Ω–µ–≤–µ—Ä–Ω–æ' in response:
            await self.send_message(chat_id, '–ò—Å–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∞—Å—ã –≤ Redmine –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üôè ! –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç —è —Å–æ–±–µ—Ä—É –≤—Å–µ —á–∞—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤ —Ç—Ä–µ–∫–µ—Ä–µ –∏ –æ–Ω–∏ –ø–æ–ø–∞–¥—É—Ç –≤ –æ—Ç—á–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É.', parse_mode=ParseMode.MARKDOWN)

