import asyncio
import datetime
import logging
import typing

import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from httpx import AsyncClient, RequestError
import pytz
from telegram.constants import ParseMode

from config import (REDMINE_API_KEY, REDMINE_URL, SCHEDULER_MISSFIRE_GRACE_TIME, 
                    CRON_HOUR, CRON_MINUTE, HOURS_THRESHOLD, GOOGLE_SHEET_ID, GOOGLE_CREDENTIALS_JSON)

if typing.TYPE_CHECKING:
    from tg_service import TelegramService

logger = logging.getLogger('app')

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É UTC+3
TZ = pytz.timezone('Europe/Moscow')

# –£–∫–∞–∂–∏—Ç–µ –æ–±–ª–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]

class ScheduleService:
    scheduler: AsyncIOScheduler
    tg_service: 'TelegramService' = None
    pending_task: asyncio.Task = None
    tasks: list

    def __init__(self) -> None:
        self.scheduler = AsyncIOScheduler(timezone=TZ)
        self._add_jobs()

    async def start(self):
        self.scheduler.start()

    async def stop(self):
        self.scheduler.shutdown(wait=True)

    def _add_jobs(self):
        logger.info(f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ {CRON_HOUR:02d}:{CRON_MINUTE:02d} (UTC+3)')
        self.scheduler.add_job(
            func=self.check_hours,
            trigger=CronTrigger(hour=CRON_HOUR, minute=CRON_MINUTE, timezone=TZ),
            misfire_grace_time=SCHEDULER_MISSFIRE_GRACE_TIME
        )

    def _get_employees_from_google_sheet(self):
        creds = Credentials.from_service_account_file(GOOGLE_CREDENTIALS_JSON, scopes=SCOPES)
        client = gspread.authorize(creds)
        sheet = client.open_by_key(GOOGLE_SHEET_ID).sheet1
        data = sheet.get_all_records()
        df = pd.DataFrame(data)
        logger.info(f'–ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ Google Sheet: {df.columns.tolist()}')
        return df

    async def check_hours(self):
        try:
            logger.info('–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Å–æ–≤')
            employees = self._get_employees_from_google_sheet()
            logger.info(f'–ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ DataFrame: {employees.columns.tolist()}')  # –í—ã–≤–æ–¥ –∏–º–µ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            yesterday = (datetime.datetime.now(TZ) - datetime.timedelta(days=1)).strftime('%Y%m%d')
            logger.info(f'–°–æ–±–∏—Ä–∞–µ–º —á–∞—Å—ã –Ω–∞ –¥–∞—Ç—É {yesterday}')
  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ –ì–ì–ì–ì–ú–ú–î–î –≤ –ì–ì–ì–ì-–ú–ú-–î–î, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç redmine –ø–æ API
            year = yesterday[:4]
            month = yesterday[4:6]
            day = yesterday[6:]
            yesterday = f"{year}-{month}-{day}"
            logger.info(f'–î–∞—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è {yesterday}')


            if not await self._is_workday(yesterday):
                logger.info(f'{yesterday} - –Ω–µ—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å')
                return

            for _, employee in employees.iterrows():
                user_id = employee['user_id']
                chat_id = employee['telegram_user_name']
                name = employee['name']
                required_hours = employee['hours_per_day']

                logger.info(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å–æ–≤ –¥–ª—è {name} (user_id: {user_id})')

                hours = await self._get_hours_from_redmine(user_id, yesterday)
                logger.info(f'{name} –æ—Ç—Ä–∞–±–æ—Ç–∞–ª {hours} —á–∞—Å–æ–≤, —Ç—Ä–µ–±—É–µ–º—ã–µ —á–∞—Å—ã: {required_hours}')

                if hours < required_hours - HOURS_THRESHOLD:
                    message = (f'{name}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —è –≤–∏–∂—É, —á—Ç–æ —Ç—ã –∑–∞—Ç—Ä–µ–∫–∞–ª(–∞) {hours} —á–∞—Å–æ–≤ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –≤ Redmine?\n\n'
                               '–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ - —Ç—ã –º–æ–ª–æ–¥–µ—Ü, –Ω–∏—á–µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ!\n\n'
                               '–ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –∏—Å–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∞—Å—ã –≤ Redmine –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üôè ! '
                               '–ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç —è —Å–æ–±–µ—Ä—É –≤—Å–µ —á–∞—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤ —Ç—Ä–µ–∫–µ—Ä–µ –∏ –æ–Ω–∏ –ø–æ–ø–∞–¥—É—Ç –≤ –æ—Ç—á–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É üßê .')
                    await self.tg_service.send_message(chat_id, message, parse_mode=ParseMode.MARKDOWN)

                logger.info(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è {name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞')

        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Å–æ–≤: {str(e)}', exc_info=True)

    async def _is_workday(self, date):
        try:
            async with AsyncClient() as client:
                response = await client.get(url=f'https://isdayoff.ru/{date}')
                return response.text == '0'
        except RequestError as error:
            logger.error(error)

    async def _get_hours_from_redmine(self, user_id, date):
        try:
            async with AsyncClient() as client:
                response = await client.get(f'{REDMINE_URL}/time_entries.json?spent_on={date}',
                                            headers={'X-Redmine-API-Key': REDMINE_API_KEY})
                data = response.json()

                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –ø–æ user_id
                total_hours = sum(entry['hours'] for entry in data['time_entries'] if entry['user']['id'] == user_id)
                return round(total_hours, 2)
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redmine –¥–ª—è user_id {user_id} –∏ date {date}: {e}')
            return 0.0

